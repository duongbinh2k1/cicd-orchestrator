version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cicd-orchestrator
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Application
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - HOST=0.0.0.0
      - PORT=8000
      
      # GitLab
      - GITLAB_API_TOKEN=${GITLAB_API_TOKEN}
      - GITLAB_BASE_URL=${GITLAB_BASE_URL:-https://gitlab.com}
      - GITLAB_WEBHOOK_SECRET=${GITLAB_WEBHOOK_SECRET}
      
      # AI Providers
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_AI_PROVIDER=${DEFAULT_AI_PROVIDER:-openai}
      
      # Database (PostgreSQL)
      - DATABASE_URL=postgresql+asyncpg://cicd_user:cicd_password@postgres:5432/cicd_orchestrator
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cicd-network

  # PostgreSQL database (optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: cicd-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cicd_orchestrator
      - POSTGRES_USER=cicd_user
      - POSTGRES_PASSWORD=cicd_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cicd_user -d cicd_orchestrator"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cicd-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: cicd-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - cicd-network
    profiles:
      - nginx

# Define volumes
volumes:
  postgres_data:
    driver: local

# Define networks
networks:
  cicd-network:
    driver: bridge
